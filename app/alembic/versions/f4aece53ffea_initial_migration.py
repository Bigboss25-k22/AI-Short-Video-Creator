"""initial migration

Revision ID: f4aece53ffea
Revises: initial_migration
Create Date: 2025-06-11 11:45:32.285483

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f4aece53ffea'
down_revision: Union[str, None] = 'initial_migration'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('voice_audios')
    op.drop_table('scene_images')
    op.drop_table('scenes')
    op.drop_table('video_scripts')
    op.alter_column('refresh_tokens', 'token',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('refresh_tokens', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('refresh_tokens', 'user_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=True)
    op.drop_constraint(op.f('refresh_tokens_token_key'), 'refresh_tokens', type_='unique')
    op.create_index(op.f('ix_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'user'::character varying"))
    op.alter_column('users', 'is_google_user',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'is_google_user',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'user'::character varying"))
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')
    op.create_unique_constraint(op.f('refresh_tokens_token_key'), 'refresh_tokens', ['token'], postgresql_nulls_not_distinct=False)
    op.alter_column('refresh_tokens', 'user_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=False)
    op.alter_column('refresh_tokens', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('refresh_tokens', 'token',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_table('video_scripts',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=False),
    sa.Column('creator_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name='video_scripts_creator_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='video_scripts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('scenes',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('script_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('scene_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('voice_over', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('voice_status', sa.VARCHAR(), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('image_status', sa.VARCHAR(), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['script_id'], ['video_scripts.id'], name='scenes_script_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='scenes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('scene_images',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('scene_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("'completed'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], name=op.f('scene_images_scene_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('scene_images_pkey'))
    )
    op.create_table('voice_audios',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('scene_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('audio_base64', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('text_content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('voice_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('speed', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'1'::double precision"), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("'completed'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], name=op.f('voice_audios_scene_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('voice_audios_pkey'))
    )
    # ### end Alembic commands ###
